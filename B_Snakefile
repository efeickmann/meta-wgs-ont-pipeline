#Second of two Snakefiles for metagenomic assembly pipeline
#Picks up after Trycycler clustering and relevant human intervention
#Use FigTree to visualize clusters
#Use Bandage to judge circularity

#Requires cluster csv: in the format below
#001	"--linear"
#002	""
#...	...
#Where the left column is the cluster number and the right column is its linearity 

#Make sure appropriate environment (same as for first Snakefile) is active

import os, glob, sys
import pandas as pd

#Constants
RUN_DATE="20230413"
FLOW_CELL="FAR73398"
DSBIT_USER="efe2108"
ONT_MODEL=""
MIN_NANO_LEN=1000

CWD = os.getcwd()
TEMP = f"{CWD}/temp"
TEMP_RUN_DIR=f"{TEMP}/{RUN_DATE}.{FLOW_CELL}"
ARCHIVE_DIR=f"{CWD}/archives"
#ILLUMINA_READS_DIR=f"{TEMP_RUN_DIR}/illumina"
DATA_DIR=f"{CWD}/fastq_pass"
BARCODE_FILE=f"{CWD}/samples_barcodes.txt"
CLUSTER_FILE=f"{CWD}/clusters.csv"

clusters_df = pd.read_csv(CLUSTER_FILE, sep='\t', header=None)
clusters_df.columns = ['clusters', 'linearity']
clusters = clusters_df['clusters'].tolist()

samples_df = pd.read_csv(BARCODE_FILE, sep='\t', header=None)
samples_df.columns=['sample', 'barcode']
samples_df = samples_df.set_index("sample", drop=False)

samples = list(samples_df.index)
barcodes = list(samples_df['barcode'])

#Hardware parameters â€” could be replaced by CL args
NUM_THREADS_PIPELINE=12

rule all:
	input:
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/9_medaka.fasta",
		clus=clusters, sample=samples)
	
rule try_reconcile:
	input:
		dir=expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}", 
		clus=clusters, sample=samples),
		reads=expand(f"{TEMP_RUN_DIR}/{{sample}}.{{barcode}}.filter_len.{MIN_NANO_LEN}.fastq.gz",
		sample=samples, barcode=barcodes)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/2_all_seqs.fasta"
	shell:
		f"""circ_str=$(grep {{clus}} {CLUSTER_FILE} | grep -i linear)
		if ["circ_str"] ; then
		trycycler reconcile --reads {{input.reads}} \
		--threads {NUM_THREADS_PIPELINE} --linear --verbose --cluster_dir {{input.dir}}
		else
		trycycler reconcile --reads {{input.reads}} \
		--threads {NUM_THREADS_PIPELINE} --verbose --cluster_dir {{input.dir}}
		fi"""
		
rule try_msa:
	input:
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/2_all_seqs.fasta",
		clus=clusters, sample=samples)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/3_msa.fasta"
	shell:
		f"""trycycler msa --cluster_dir {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}} \
		--threads {NUM_THREADS_PIPELINE}"""
		
rule try_partition:
	input:
		seqs=expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/2_all_seqs.fasta", 
		clus=clusters, sample=samples),
		reads=expand(f"{TEMP_RUN_DIR}/{{sample}}.{{barcode}}.filter_len.{MIN_NANO_LEN}.fastq.gz",
		sample=samples, barcode=barcodes)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/4_reads.fastq"
	shell:
		f"""trycyler partition --reads {{input.reads}}
		--threads {NUM_THREADS_PIPELINE} --cluster_dirs \
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}", clus=clusters)"""
		
rule try_consensus:
	input:
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/3_msa.fasta",
		clus=clusters, sample=samples),
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/4_reads.fastq",
		clus=clusters, sample=samples)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/7_final_consensus.fasta"
	shell:
		f"""circ_str=$(grep {{clus}} {CLUSTER_FILE} | grep -i linear)
		if ["circ_str"] ; then
		trycycler consensus --cluster_dir {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}} \
		--linear --verbose --threads {NUM_THREADS_PIPELINE}
		else
		trycycler consensus --cluster_dir {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}} \
		--verbose --threads {NUM_THREADS_PIPELINE}
		fi"""
		
rule medaka:
	input:
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/8_racon.fasta",
		clus=clusters, sample=samples)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/9_medaka.fasta"
	shell:
		f"""medaka_consensus -i {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/4_reads.fastq \
		{input} -o {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/ -m \
		{ONT_MODEL} -t {NUM_THREADS_PIPELINE}
		mv {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/consensus.fasta {{output}}"""
		
rule racon:
	input:
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/7_final_consensus.fasta",
		clus=clusters, sample=samples),
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/overlap.sam",
		clus=clusters, sample=samples),
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/8_racon.fasta"
	shell:
		f"""racon -t {NUM_THREADS_PIPELINE} \
		{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/4_reads.fastq \
		{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/overlap.sam \
		{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/7_final_consensus.fasta"""
		
rule read_contig_overlap:
	input:
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/7_final_consensus.fasta",
		clus=clusters, sample=samples)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/overlap.sam"
	shell:
		f"""minimap2 -a -t {NUM_THREADS_PIPELINE} {input} \
		{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/cluster_{{clus}}/4_reads.fastq \
		> {{output}}"""
	
#May not make sense to use, since other polishers may cause differences
#between reads and assembly. Instead: multiple rounds of medaka/racon?
#Consult Medini
rule FMLRC2:

	
		
		
		
		
	