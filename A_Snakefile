#First of two Snakefiles for metagenomic assembly pipeline
#Runs up through Trycycler clustering, at which point human intervention is needed
#Use FigTree to visualize clusters

#Remember to activate snake env

import os, glob, sys
import pandas as pd

#Constants
#


RUN_DATE="20230413"
CALL_DATE="20230414"
FLOW_CELL="FAW74294"
DSBIT_USER="efe2108"
ONT_MODEL="1713_X5"
HEX_ID="49e28d6c"

CWD = os.getcwd()
TEMP = f"{CWD}/temp"
TEMP_RUN_DIR=f"{TEMP}/{RUN_DATE}.{FLOW_CELL}"
ARCHIVE_DIR=f"""/media/uhlemannlab/Nano_Data/Nanopore/Metagenomics/\
{RUN_DATE}_MG/{CALL_DATE}_{ONT_MODEL}_{FLOW_CELL}_{HEX_ID}"""
#ILLUMINA_READS_DIR=f"{TEMP_RUN_DIR}/illumina"
#DATA_DIR=f"{CWD}/fastq_pass"
#
BARCODE_FILE=f"{ARCHIVE_DIR}/fastq_pass/samples_barcodes"

samples_df = pd.read_csv(BARCODE_FILE, sep='\t', header=None)
samples_df.columns=['sample', 'barcode']
samples_df = samples_df.set_index("sample", drop=False)

samples = list(samples_df.index)
barcode = list(samples_df['barcode'])
# samples = ['30371']
# barcode = ['barcode01']

assemblers = ["flye", "raven", "miniasm", "canu"]

#Hardware parameters — could be replaced by CL args
NUM_THREADS_PIPELINE=12

#Software parameters
MIN_NANO_LEN=1000
#Below are unused
#MAX_NANO_HOMOP=20
#TRYCYCLER_SUBSAMP_NUM=12

#format should be a string of the form: "abc.sample.xyz.barcode"
#sample is a list of samples
#barcode is a list of barcodes corresponding to the samples
def get_files(format, sample, barcode):
	out_list = []
	for i in len(sample):
		str = format.replace("sample", sample[i])
		str = str.replace("barcode", barcode[i])
		out_list.append(str)
	return out_list

rule all:
	input:
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/contigs.phylip", sample=samples)
		
#Combine all fastqs from a given barcode into one file
# rule concatenate:
# 	input: 
# 		lambda wc: glob.glob(f"{DATA_DIR}/{wc.barcode}/*.fastq.gz")
# 	output:
# 		f"{ARCHIVE_DIR}/{RUN_DATE}.{FLOW_CELL}.{{barcode}}.{{sample}}.fastq.gz"
# 	shell:
# 		f"cat {input} > {{output}}"

#Loose QC		
rule qc:
	input:
		expand(f"{ARCHIVE_DIR}/{{sample}}.fastq.gz", sample=samples)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz"
	shell:
		f"""filtlong --min_length {MIN_NANO_LEN} --keep_percent 95 {ARCHIVE_DIR}/\
{{wildcards.sample}}.fastq.gz | gzip > {{output}}"""

#Multiple assemblies so Trycycler has something to work with	
rule flye:
	input:
		f"{TEMP_RUN_DIR}/{{sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz"
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/flye_assembly.fasta"
	threads: 4
	shell:
		f"""flye --nano-hq {TEMP_RUN_DIR}/{{wildcards.sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz \
-o {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies \
--threads 4 --meta --debug --read-error 0.03
circ_tigs=$(mktemp)
long_tigs=$(mktemp)
temp_fasta=$(mktemp)
grep \"Y\" {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/assembly_info.txt \
>$circ_tigs
grep \"contig\" {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/assembly_info.txt \
| head -n 20 > $long_tigs
cat $circ_tigs $long_tigs | cut -f1 > {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/flye_tigs.txt
sort -n {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/flye_tigs.txt \
| sort -u > {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/flye_tigs_sorted.txt\n"""
		"awk \'/^>/ {{printf(\"\\n%s__\",$0);next; }} {{ printf(\"%s__\",$0);}}  END {{printf(\"\\n\");}}\' "
		f"""{TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/assembly.fasta \
| sort -n > $temp_fasta\n
LC_ALL=C fgrep -w -f {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/flye_tigs_sorted.txt $temp_fasta | """
		"awk -F\'__\' \'{{for(i=1; i<NF; i+=1) {{print $i}}}}\' "
		f"""> {{output}} 
rm -f $circ_tigs $long_tigs $temp_fasta"""

# rule raven:
# 	input:
# 		f"{TEMP_RUN_DIR}/{{sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz"
# 	output:
# 		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/raven_assembly.fasta"
# 	shell:
# 		f"""raven -t {NUM_THREADS_PIPELINE} {TEMP_RUN_DIR}/{{wildcards.sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz\
#  > {{output}}"""
# 
# rule miniasm:
# 	input:
# 		f"{TEMP_RUN_DIR}/{{sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz"
# 	output:
# 		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/mini_assembly.fasta"
# 	shell:
# 		"overlaps=$(mktemp).paf\n"
# 		"unpolished_assembly=$(mktemp).gfa\n"
# 		"temp_out=$(mktemp).gfa\n"
# 		
# 		f"""minimap2 -x ava-ont -t {NUM_THREADS_PIPELINE} \
# {TEMP_RUN_DIR}/{{wildcards.sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz \
# {TEMP_RUN_DIR}/{{wildcards.sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz > $overlaps
# miniasm -f {TEMP_RUN_DIR}/{{wildcards.sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz $overlaps > $unpolished_assembly
# minipolish --threads {NUM_THREADS_PIPELINE} \
# {TEMP_RUN_DIR}/{{wildcards.sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz $unpolished_assembly > $temp_out
# rm -f $overlaps $unpolished_assembly\n"""
# 		"awk \'/^S/{{print \">\"$2\"\\n\"$3}}\' "
# 		f"""$temp_out > {{output}}
# rm -f $temp_out"""
# 
# rule canu: #might need to do some trimming of contig overlaps — script in Trycycler repo
# 	input:
# 		f"{TEMP_RUN_DIR}/{{sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz"
# 	output:
# 		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/canu_assembly.fasta"
# 	threads: 4
# 	shell:
# 		f"""canu -d {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/ -p canu.{{wildcards.sample}} \
# correctedErrorRate=0.06 genomeSize=3.87m -nanopore -fast -corrected \
# stopOnLowCoverage=4 maxThreads=4 \
# {TEMP_RUN_DIR}/{{wildcards.sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz
# temp_fasta_canu=$(mktemp)
# mv {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/canu.{{wildcards.sample}}.contigs.fasta \
# {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/canu_assembly_unsorted.fasta\n"""
# 		"awk \'/^>/ {{printf(\"\\n%s__\",$0);next; }} {{ printf(\"%s__\",$0);}}  END {{printf(\"\\n\");}}\' "
# 		f"""{TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/canu_assembly_unsorted.fasta \
# | sort -n > $temp_fasta_canu
# LC_ALL=C fgrep -w -f canu_tig_ids.txt $temp_fasta_canu | """
# 		"awk -F\'__\' \'{{for(i=1; i<NF; i+=1) {{print $i}}}}\' "
# 		f"""> {{output}}
# rm -f $temp_fasta_canu"""	

#May need to unzip read file for this part
rule try_cluster:
	input:
		# expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/canu_assembly.fasta",
# 		sample=samples),
# 		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/mini_assembly.fasta",
# 		sample=samples),
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/flye_assembly.fasta",
		sample=samples)
	# 	expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/raven_assembly.fasta",
# 		sample=samples)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/contigs.phylip"
	shell:
		f"""trycycler cluster --assemblies {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.assemblies/*_assembly.fasta \
--reads {TEMP_RUN_DIR}/{{wildcards.sample}}.filter_len.{MIN_NANO_LEN}.fastq.gz \
--out_dir {TEMP_RUN_DIR}/{{wildcards.sample}}.{RUN_DATE}.clusters --threads {NUM_THREADS_PIPELINE}"""
		
	
