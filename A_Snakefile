#First of two Snakefiles for metagenomic assembly pipeline
#Runs up through Trycycler clustering, at which point human intervention is needed
#Use FigTree to visualize clusters

#Remember to activate snake env

import os, glob, sys
import pandas as pd

#Constants

RUN_DATE="20230413"
FLOW_CELL="FAW74294"
DSBIT_USER="efe2108"

CWD = os.getcwd()
TEMP = f"{CWD}/temp"
TEMP_RUN_DIR=f"{TEMP}/{RUN_DATE}.{FLOW_CELL}"
ARCHIVE_DIR=f"/media/uhlemannlab/Nano_Data/Nanopore/Metagenomics/{RUN_DATE}_MG/*"
#ILLUMINA_READS_DIR=f"{TEMP_RUN_DIR}/illumina"
#DATA_DIR=f"{CWD}/fastq_pass"
#
BARCODE_FILE=f"{CWD}/samples_barcodes.txt"

samples_df = pd.read_csv(BARCODE_FILE, sep='\t', header=None)
samples_df.columns=['sample', 'barcode']
samples_df = samples_df.set_index("sample", drop=False)

samples = list(samples_df.index)
barcode = list(samples_df['barcode'])
# samples = ['30371']
# barcode = ['barcode01']

assemblers = ["flye", "raven", "miniasm", "canu"]

#Hardware parameters — could be replaced by CL args
NUM_THREADS_PIPELINE=12

#Software parameters
MIN_NANO_LEN=1000
#Below are unused
#MAX_NANO_HOMOP=20
#TRYCYCLER_SUBSAMP_NUM=12

rule all:
	input:
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/contigs.phylip", sample=samples)
		
#Combine all fastqs from a given barcode into one file
# rule concatenate:
# 	input: 
# 		lambda wc: glob.glob(f"{DATA_DIR}/{wc.barcode}/*.fastq.gz")
# 	output:
# 		f"{ARCHIVE_DIR}/{RUN_DATE}.{FLOW_CELL}.{{barcode}}.{{sample}}.fastq.gz"
# 	shell:
# 		f"cat {input} > {{output}}"

#Loose QC		
rule qc:
	input:
		expand(f"{ARCHIVE_DIR}/{{sample}}.fastq.gz", sample=samples)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{barcode}.filter_len.{MIN_NANO_LEN}.fastq.gz"
	shell:
		f"filtlong --min_length {MIN_NANO_LEN} --keep_percent 95 {input} | gzip > {{output}}"

#Multiple assemblies so Trycycler has something to work with	
rule flye:
	input:
		f"{TEMP_RUN_DIR}/{{sample}}.{barcode}.filter_len.{MIN_NANO_LEN}.fastq.gz"
	output:
		"{TEMP_RUN_DIR}/{sample}.{RUN_DATE}.assemblies/flye_assembly.fasta"
	shell:
		f"""flye --nano-hq {input} -o {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies \
		--threads {NUM_THREADS_PIPELINE} --meta --debug --read-error 0.03
		mv {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/assembly.fasta \
		{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/flye_assembly.fasta"""
	
rule raven:
	input:
		f"{TEMP_RUN_DIR}/{{sample}}.{barcode}.filter_len.{MIN_NANO_LEN}.fastq.gz"
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/raven_assembly.fasta"
	shell:
		f"raven -t {NUM_THREADS_PIPELINE} {input} > {{output}}"

rule miniasm:
	input:
		f"{TEMP_RUN_DIR}/{{sample}}.{barcode}.filter_len.{MIN_NANO_LEN}.fastq.gz"
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/mini_assembly.fasta"
	shell:
		"overlaps=$(mktemp)\".paf\"\n"
		"unpolished_assembly=$(mktemp)\".gfa\"\n"
		
		f"""minimap2 -x ava-ont -t {NUM_THREADS_PIPELINE} {input} {input} \
		> $overlaps
		miniasm -f {input} $overlaps > $unpolished_assembly
		minipolish --threads {NUM_THREADS_PIPELINE} {input} $unpolished_assembly \
		> {{output}}
		rm -f $overlaps $unpolished_assembly"""

rule canu: #might need to do some trimming of contig overlaps — script in Trycycler repo
	input:
		f"{TEMP_RUN_DIR}/{{sample}}.{barcode}.filter_len.{MIN_NANO_LEN}.fastq.gz"
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/canu_assembly.fasta"
	shell:
		f"""canu -d {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/ -p canu.{{sample}} \
		--correctedErrorRate 0.06 genomeSize=3.87m -nanopore -fast -corrected \
		--stopOnLowCoverage=1 {input} > {{output}}"""
		
#May need to unzip read file for this part
rule try_cluster:
	input:
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/canu_assembly.fasta",
		sample=samples),
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/mini_assembly.fasta",
		sample=samples),
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/flye_assembly.fasta",
		sample=samples),
		expand(f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/raven_assembly.fasta",
		sample=samples)
	output:
		f"{TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters/contigs.phylip"
	shell:
		f"""trycycler cluster --assemblies {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.assemblies/*.fasta \
		--reads {TEMP_RUN_DIR}/{{sample}}.{barcode}.filter_len.{MIN_NANO_LEN}.fastq.gz \
		--out_dir {TEMP_RUN_DIR}/{{sample}}.{RUN_DATE}.clusters --threads {NUM_THREADS_PIPELINE}"""
		
	
